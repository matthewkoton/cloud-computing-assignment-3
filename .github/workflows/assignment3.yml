\name: build-test-push-v4
on:
  push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile.setport
        tags: mysvr-v2:latest
        outputs: type=docker,dest=/tmp/image.tar
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: mysvr
        path: /tmp/image.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    1. download image and run it in a container
    - name: Download artifact
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker images from previous workflows
      run: docker load --input mysvr/image.tar
    - name: check mysvr image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -p8000:8000 mysvr-v2 &
    - name: Check container is running
      run: docker ps
#     2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      3. run pytest tests and check results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd pytest-code
        pytest -v assignment3_test.py > test_results.txt
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: GH_test_results
        path: pytest-code/test_results.txt
  
  
  query:
    needs: build
    runs-on: ubuntu-latest
    steps:
    -name: create directory
      run: mkdir -p mypath
    - name: curl
      run: |
        echo curl --location --request POST 'http://127.0.0.1:8000' >> mypath/response.txt
        echo $(curl --location --request POST 'http://127.0.0.1:8000') >>mypath/response.txt
    