name: Service Workflow
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3
    -
      name: make log file
      run: mkdir -p logpath
    - 
      name: log time
      run: |
        echo date -Iminutes >> logpath/log.txt
        echo matthew koton >> logpath/log.txt
    - 
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - 
      name: Build and export
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        tags: mysvr:latest
        outputs: type=docker,dest=/tmp/image.tar

    - name: Update log based on build status success
      if: steps.docker_build.outcome == 'success'
      run: echo Image successfully built >> logpath/log.txt

    - name: Update log based on build status failure
      if: steps.docker_build.outcome == 'failure'
      run: echo Image not successfully built >> logpath/log.txt

    - name: Upload log file
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: logpath

    -
      name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: mysvr
        path: /tmp/image.tar
  

  test:
    if: success()
    needs: build
    runs-on: ubuntu-latest

    steps:
    - 
      name: Download artifact
      uses: actions/download-artifact@v3
  
    - 
      name: Load Docker images from previous workflows
      run: docker load --input mysvr/image.tar
    - 
      name: check mysvr image is loaded
      run: docker image ls
    - 
      name: run image in container
      id: docker_run_container
      run: docker run -p8000:8000 mysvr &

    - name: Update log based on build status success
      if: steps.docker_run_container.outcome == 'success'
      run: echo Container up and running >> logs/log.txt

    - name: Update log based on build status failure
      if: steps.docker_run_container.outcome == 'faulure'
      run: echo Container failed to run >> logs/log.txt
    
    - 
      name: Check container is running
      run: docker ps
    - 
      name: Checkout
      uses: actions/checkout@v3
    - 
      name: Set up Python
      uses: actions/setup-python@v4
    - 
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install requests
    - 
      name: Test with pytest 
      id: tests
      run: |
        cd pytest-code
        pytest -v assignment3_test.py > test_results.txt
        cat test_results.txt
        cd ..

    - 
      name: Update log based on tests success
      if: steps.tests.outcome == 'success'
      run: echo tests succeeded >> logs/log.txt
    - 
      name: Update log based on tests failure
      if: steps.tests.outcome == 'failure'
      run: echo tests failed >> logs/log.txt
    - 
      name: upload test results
      if: always()  
      uses: actions/upload-artifact@v3
      with:
          name: GH_test_results
          path: pytest-code/test_results.txt

    - 
      name: Upload log file
      if: always()  
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: logs

  query:
    if: success()
    needs: test
    runs-on: ubuntu-latest
    steps:
    -
      name: Download artifact
      uses: actions/download-artifact@v3
    - 
      name: Load Docker images from previous workflows
      run: docker load --input mysvr/image.tar
    - 
      name: check mysvr image is loaded
      run: docker image ls
    - 
      name: run image in container
      run: docker run -p8000:8000 mysvr &
    - 
      name: Check container is running
      run: docker ps
    - 
      name: Checkout
      uses: actions/checkout@v3
    - 
      name: create directory and file
      run: 
        mkdir -p mypath
    -
      name: download jq
      run: sudo apt-get install jq
    - 
      name: curl
      run: |
        chmod +x q.sh
        bash q.sh
    - 
      name: upload test results
      if: always()  
      uses: actions/upload-artifact@v3
      with:
          name: GH_curl_results
          path: mypath/response



